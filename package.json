{
  "package.json": {
    "name": "docusign-signature-api",
    "version": "1.0.0",
    "description": "API to add DocuSign signatures to HTML documents and send via email",
    "main": "server.js",
    "scripts": {
      "start": "node server.js",
      "dev": "nodemon server.js",
      "test": "jest"
    },
    "dependencies": {
      "express": "^4.18.2",
      "multer": "^1.4.5",
      "docusign-esign": "^6.4.0",
      "dotenv": "^16.3.1"
    },
    "devDependencies": {
      "express": "^4.18.2",
      "multer": "^1.4.5",
      "docusign-esign": "^6.4.0",
      "dotenv": "^16.3.1",
      "nodemon": "^3.0.1",
      "jest": "^29.7.0"
    },
    "keywords": [
      "docusign",
      "esignature",
      "api",
      "nodejs"
    ],
    "author": "Your Name",
    "license": "MIT"
  },
  ".env.example": {
    "description": "Environment variables template",
    "content": "# DocuSign Configuration\nDOCUSIGN_INTEGRATION_KEY=your_integration_key_here\nDOCUSIGN_USER_ID=your_user_id_here\nDOCUSIGN_ACCOUNT_ID=your_account_id_here\nDOCUSIGN_PRIVATE_KEY=-----BEGIN RSA PRIVATE KEY-----\\nyour_private_key_here\\n-----END RSA PRIVATE KEY-----\n\n# Environment (demo or production)\nDOCUSIGN_BASE_PATH=https://demo.docusign.net/restapi\n\n# Server Configuration\nPORT=3000"
  },
  "README.md": {
    "title": "DocuSign HTML Signature API",
    "content": "# DocuSign HTML Signature API\n\nA Node.js API that accepts HTML files and email addresses, adds DocuSign signature fields, and sends documents for electronic signature.\n\n## Features\n\n- Upload HTML documents\n- Automatically add signature, name, and date fields\n- Send documents via DocuSign for electronic signature\n- Track envelope status\n- RESTful API design\n\n## Prerequisites\n\n1. DocuSign Developer Account\n2. DocuSign Integration Key\n3. RSA Key Pair for JWT authentication\n4. Node.js 14+ installed\n\n## Setup\n\n### 1. Install Dependencies\n```bash\nnpm install\n```\n\n### 2. Configure DocuSign\n\n1. Create a DocuSign Developer account at https://developers.docusign.com/\n2. Create a new application and get your Integration Key\n3. Generate RSA key pair for JWT authentication\n4. Add your public key to your DocuSign application\n5. Get your User ID and Account ID\n\n### 3. Environment Configuration\n\n1. Copy `.env.example` to `.env`\n2. Fill in your DocuSign credentials\n\n```env\nDOCUSIGN_INTEGRATION_KEY=your_integration_key\nDOCUSIGN_USER_ID=your_user_id\nDOCUSIGN_ACCOUNT_ID=your_account_id\nDOCUSIGN_PRIVATE_KEY=your_private_key\n```\n\n### 4. Start the Server\n\n```bash\nnpm start\n# or for development\nnpm run dev\n```\n\n## API Endpoints\n\n### POST /api/docusign-signature\n\nSend an HTML document for signature.\n\n**Request:**\n- Method: POST\n- Content-Type: multipart/form-data\n- Body:\n  - `htmlFile`: HTML file to be signed\n  - `email`: Recipient's email address\n  - `signerName`: Recipient's full name\n\n**Response:**\n```json\n{\n  \"success\": true,\n  \"message\": \"Document sent for signature successfully\",\n  \"envelopeId\": \"envelope-id-here\",\n  \"status\": \"sent\",\n  \"recipientEmail\": \"recipient@example.com\"\n}\n```\n\n### GET /api/envelope/:envelopeId/status\n\nCheck the status of a sent envelope.\n\n**Response:**\n```json\n{\n  \"envelopeId\": \"envelope-id\",\n  \"status\": \"completed\",\n  \"createdDateTime\": \"2024-01-01T10:00:00Z\",\n  \"lastModifiedDateTime\": \"2024-01-01T10:30:00Z\"\n}\n```\n\n## Usage Examples\n\n### Using cURL\n\n```bash\n# Send document for signature\ncurl -X POST http://localhost:3000/api/docusign-signature \\\n  -F \"htmlFile=@document.html\" \\\n  -F \"email=signer@example.com\" \\\n  -F \"signerName=John Doe\"\n\n# Check envelope status\ncurl http://localhost:3000/api/envelope/your-envelope-id/status\n```\n\n### Using JavaScript/Fetch\n\n```javascript\nconst formData = new FormData();\nformData.append('htmlFile', htmlFileInput.files[0]);\nformData.append('email', 'signer@example.com');\nformData.append('signerName', 'John Doe');\n\nfetch('/api/docusign-signature', {\n  method: 'POST',\n  body: formData\n})\n.then(response => response.json())\n.then(data => console.log(data));\n```\n\n## Security Considerations\n\n- Store private keys securely\n- Use HTTPS in production\n- Implement rate limiting\n- Validate file types and sizes\n- Sanitize user inputs\n\n## Error Handling\n\nThe API returns appropriate HTTP status codes:\n- 200: Success\n- 400: Bad Request (missing parameters)\n- 500: Internal Server Error\n\n## License\n\nMIT License"
  },
  "docker-compose.yml": {
    "description": "Docker configuration for easy deployment",
    "content": "version: '3.8'\n\nservices:\n  docusign-api:\n    build: .\n    ports:\n      - \"3000:3000\"\n    environment:\n      - NODE_ENV=production\n    env_file:\n      - .env\n    volumes:\n      - ./uploads:/app/uploads\n    restart: unless-stopped"
  },
  "Dockerfile": {
    "description": "Docker configuration",
    "content": "FROM node:18-alpine\n\nWORKDIR /app\n\nCOPY package*.json ./\nRUN npm ci --only=production\n\nCOPY . .\n\nRUN mkdir -p uploads\n\nEXPOSE 3000\n\nUSER node\n\nCMD [\"npm\", \"start\"]"
  },
  "dependencies": {
    "docusign-esign": "^8.3.0",
    "dotenv": "^17.2.1",
    "express": "^5.1.0",
    "multer": "^2.0.2"
  }
}
